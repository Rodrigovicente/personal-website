---

---
<script type="module">
	
import * as d3 from "https://cdn.jsdelivr.net/npm/d3@7/+esm";

const data = [
		{
			name: "Front-End",
			color: {
				h: 213,
				s: 98,
				l: 49
			},
			children: [
				{
					name: "React",
					color: {
						h: 193,
						s: 86,
						l: 50
					},
					children: [
						{
							name: "React Router",
							color: {
								h: 0,
								s: 70,
								l: 60
							}
						},
						{
							name: "Redux",
							color: {
								h: 280,
								s: 40,
								l: 60
							}
						},
						{
							name: "shadcn/ui",
							color: {
								h: 180,
								s: 10
							}
						},
						{
							name: "React Aria UI",
							color: {
								h: 350,
								s: 70,
								l: 60
							}
						},
					]
				},
				{
					name: "Astro",
					color: {
						h: 14,
						s: 84,
						l: 41
					}
				},
				{
					name: "Angular",
					color: {
						h: 347,
						s: 100,
						l: 42
					},
					children: [
						{
							name: "PrimeNg UI",
							color: {
								h: 347,
								s: 100,
								l: 42
							}
						},
					]
				},
				{
					name: "HTML5 CSS3",
					color: {
						h: 12,
						s: 73,
						l: 51
					},
					children: [
						{
							name: "Tailwind",
							color: {
								h: 198,
								s: 86,
								l: 58
							}
						},
						{
							name: "Bootstrap",
							color: {
								h: 264,
								s: 58,
								l: 57
							}
						},
					]
				},
				{
					name: "D3.js",
					color: {
						h: 21,
						s: 84,
						l: 61
					}
				},
			]
		},
		{
			name: "Back-End",
			color: {
				h: 270,
				s: 60,
				l: 45
			},
			children: [
				{
					name: "NodeJS",
					color: {
						h:79,
						s: 80,
						l: 36
					},
					children: [
						{
							name: "Express.js",
							color: {
								h: 48,
								s: 85, 
								l: 40
							}
						},
						{
							name: "Jest.js",
							color: {
								h: 14,
								s: 84, 
								l: 41
							}
							
						},
						{
							name: "TypeScript",
							color: {
								h: 211,
								s: 61, 
								l: 47
							}
						},
					]
				},
				{
					name: "Next.js",
					color: {
						s: 0,
						l: 40
					}
				},
				{
					name: "Banco de Dados",
					children: [
						{
							name: "PostgreSQL",
							color: {
								h:207,
								s: 48,
								l: 38
							},
						},
						{
							name: "Modelagem",
						}
					]
				},
				{
					name: "APIs",
					color: {
						h: 220,
						s: 80,
						l: 40
					},
					children: [
						{
							name: "RESTful"
						},
						{
							name: "Swagger",
							color: {
								h: 77,
								s: 100,
								l: 29
							}
						}
					]
				}
			]
		}
	]


const chart = (data, drag, invalidation) => {
// Specify the chartâ€™s dimensions.
const width = 928;
const height = 600;

// Compute the graph and start the force simulation.
const skills = {
	frontend: {
		root: d3.hierarchy(data[0]),
		links: undefined,
		nodes: undefined
	},
	backend: {
		root: d3.hierarchy(data[1]),
		links: undefined,
		nodes: undefined
	}
}

skills.frontend.links = skills.frontend.root.links()
skills.backend.links = skills.backend.root.links()
skills.frontend.nodes = skills.frontend.root.descendants()
skills.backend.nodes = skills.backend.root.descendants()

let links = skills.frontend.links.concat(skills.backend.links)
const nodes = skills.frontend.nodes.concat(skills.backend.nodes)

const extraLinks = [
	{
		source: skills.backend.nodes.find(({data}) => data.name === "TypeScript"),
		target: skills.frontend.nodes.find(({data}) => data.name === "Front-End")
	},
	{
		source: skills.backend.nodes.find(({data}) => data.name === "Jest.js"),
		target: skills.frontend.nodes.find(({data}) => data.name === "Front-End")
	}
]

links = links.concat(extraLinks)

console.log(links)
const simulation = d3.forceSimulation(nodes)
		.force("link", d3.forceLink(links).id(d => d.id).distance(d => distanceByDepth(d.source.depth, d.target.depth)).strength(1.8))
		.force("charge", d3.forceManyBody().strength(-900))
		.force("x", d3.forceX())
		.force("y", d3.forceY())

const skillTree = d3.select("#skillTree")

// Create the container SVG.
const svg = skillTree.append("svg")
		.attr("width", width)
		.attr("height", height)
		.attr("stroke-linecap", "round")
		.attr("viewBox", [-width / 2, -height / 2, width, height])
		.attr("style", "max-width: 100% height: auto")

// Append links.
const link = svg.append("g")
		.attr("stroke", "#999")
		.attr("stroke-opacity", 0.6)
		// .attr("stroke-width", 3)
	.selectAll("line")
	.data(links)
	.join("line")
		// .each(function(d) {
		// 	console.log("run")
		// 	d3.select(this)
		// 		.attr("x1", d.source.x + 100)
		// 		.attr("y1", d.source.y + 100)
		// 		.attr("x2", d.target.x)
		// 		.attr("y2", d.target.y)
		// 		.attr("class", d => {console.log(d); return 'b-'+d.index})
		// })

// Append nodes.
const groupNode = skillTree.append("div")
		.attr("class", "skill-node")
	.selectAll("div")
	.data(nodes)

		
const node = groupNode.join("div")
		.attr("class", "skill-blob")
		.style("--blob-color-h", ({data: {color: {h} = {}}}) => h != null ? h : "150")
		.style("--blob-color-s", ({data: {color: {s} = {}}}) => s != null ? `${s}%` : "50%")
		.style("--blob-color-l", ({data: {color: {l} = {}}}) => l != null ? `${l}%` : "50%")
		// .attr("stroke", d => d.children ? null : "#fff")
		// .attr("width", d => {return d.depth != null ? (50 - (d.depth * 12)) : 3.5})
		.style("top", d => {const size = sizeFromDepth(d.depth); return `calc(50% - ${size/2}px)`})
		.style("left", d => {const size = sizeFromDepth(d.depth); return `calc(50% - ${size/2}px)`})
		.style("width", d => {const size = sizeFromDepth(d.depth); return `${size}px`})
		.style("height", d => {const size = sizeFromDepth(d.depth); return `${size}px`})
		.call(drag(simulation))


	const text = node
	.append("span")
		.attr("class", "blob-text")
		.style("font-size", d => `${sizeFromDepth(d.depth) / 6}px`)
		.text(d => d.data.name)

simulation.on("tick", function() {
	link
	.each(function (d) {

		const source = {
			x: d.source.x,
			y: d.source.y,
			d: d.source.depth,
			r: sizeFromDepth(d.source.depth) / 2,
		}

		const target = {
			x: d.target.x,
			y: d.target.y,
			d: d.target.depth,
			r: sizeFromDepth(d.target.depth) / 2,
		}
		// const blobDistance = distanceByDepth(d.source.depth, d.target.depth)
		const distanceX = source.x - target.x
		const distanceY = source.y - target.y

		const distance = Math.sqrt(distanceX * distanceX + distanceY * distanceY) - source.r - target.r

		d3.select(this)
			.attr("x1", d.source.x)
			.attr("y1", d.source.y)
			.attr("x2", d.target.x)
			.attr("y2", d.target.y)
			.attr("stroke-dasharray", `${distance} 1000px`)
			.attr("stroke-dashoffset", -source.r)
	})

	node
		.style("translate", d => `${d.x}px ${d.y}px`)
		//   .attr("cx", d => d.x)
		//   .attr("cy", d => d.y)

	//  text
	//      .attr("dx", d => { return d.x })
	//      .attr("dy", d => d.y + 6)
})

invalidation.then(() => simulation.stop())

return svg.node();
}

function drag(simulation) {

	function dragstarted(event, d) {
		if (!event.active) simulation.alphaTarget(0.3).restart();
		d.fx = d.x;
		d.fy = d.y;
	}
	
	function dragged(event, d) {
		d.fx = event.x;
		d.fy = event.y;
	}
	
	function dragended(event, d) {
		if (!event.active) simulation.alphaTarget(0);
		d.fx = null;
		d.fy = null;
	}
	
	return d3.drag()
			.on("start", dragstarted)
			.on("drag", dragged)
			.on("end", dragended);
}

// TODO
const invalidation = new Promise((res, rej) => {})

function sizeFromDepth(depth) {
	const size = 120

	if (depth == null) return size

	depth = depth * 1.2

	return ((size*8) / (depth * depth + 8))
}

function distanceByDepth(sourceDepth, targetDepth) {
	const sourceSize = sizeFromDepth(sourceDepth)
	const targetSize = sizeFromDepth(targetDepth)

	return (45/(sourceDepth+1) + (sourceSize + targetSize)/2)
}

const svg = chart(data, drag, invalidation)
// document.getElementById("skillChart").append(svg)

</script>

<div id="skillChart">
	<div id="skillTree"></div>
</div>

<style lang="scss" is:inline>
	#skillTree {
		position: relative;
		width: 928px;

		.skill-node {
			position: absolute;
			top: 50%;
			left: 50%;

			.skill-blob {
				position: absolute;
				display: flex;
				justify-content: center;
				align-items: center;
				background-color: hsla(var(--blob-color-h, 241), var(--blob-color-s, 74%), var(--blob-color-l, 65%), 0.4);
				// background-color: hsla(241, 74%, 65%, 0.2);
				backdrop-filter: blur(3px);
				background-image: radial-gradient(#ffffff8c 10%, #ffffff00 50%);
				background-position: left 50% top 90%;
				background-repeat: no-repeat;
				background-size: 200% 200%;
				// box-shadow: inset 0 0 15px 5px #ffffff9c, 0 10px 10px -10px #00000038;
				box-shadow: inset 0 -5px 10px 3px hsla(var(--blob-color-h, 241), var(--blob-color-s, 74%), var(--blob-color-l, 65%), 0.5),
								inset 0 0 25px 5px #ffffff,
								0 10px 10px -10px #00000038;
				border-radius: 999px;
				aspect-ratio: 1/1;
				width: 100px;
				height: 100px;
				overflow: hidden;
					transition: scale 0.15s ease-out;
				cursor: pointer;
				
				.blob-text {
					padding: 0.5rem;
					text-align: center;
					text-shadow: 0 2px 10px hsl(var(--blob-color-h, 241), var(--blob-color-s, 74%), var(--blob-color-l, 65%)), 0 0 5px #00000079;
					line-height: 110%;
					z-index: 1;
				}

				&::before {
					content: '';
					position: absolute;
					display: block;
					height: 200%;
					width: 60%;
					top: -50%;
					left: -95%;
					rotate: 45deg;
					transition: none;
					mix-blend-mode: plus-lighter;
					opacity: 0.35;
					background-image: linear-gradient(90deg, #ffffff00, #ffffff, #ffffff, #ffffff00);
				}

				&:hover {
					transition: scale 0.25s cubic-bezier(0.175, 0.885, 0.32, 1.275);
					scale: 1.4;
					z-index: 2;

				&:before {
					left: 150%;
					transition: left 0.5s ease-in;
				}
				}
			}
		}
	}
</style>
